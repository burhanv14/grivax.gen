// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id     String        @id @default(cuid()) 
  email       String        @unique
  name        String?
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  courses     Course[]
  genCourses  GenCourse[]
  quizAttempts QuizAttempt[]
}

model Course {
  course_id String   @id @default(cuid())
  user_id   String
  genId     String
  title     String
  image     String
  progress  Int      @default(0)
  units     Unit[]
  quiz      Quiz?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [user_id])
}

model Quiz {
  quiz_id   String        @id @default(cuid())
  course_id String        @unique
  questions Json
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  course    Course        @relation(fields: [course_id], references: [course_id])
  attempts  QuizAttempt[]
}

model QuizAttempt {
  attempt_id    String   @id @default(cuid())
  quiz_id       String
  user_id       String
  answers       Json     // Array of user's selected answers
  score         Int      // Percentage score (0-100)
  correctCount  Int      // Number of correct answers
  totalQuestions Int     // Total number of questions
  completedAt   DateTime @default(now())
  quiz          Quiz     @relation(fields: [quiz_id], references: [quiz_id])
  user          User     @relation(fields: [user_id], references: [user_id])
  
  @@unique([quiz_id, user_id]) // Ensure one attempt per user per quiz
}

model Unit {
  unit_id   String    @id @default(cuid())
  course_id String
  name      String
  progress  Int       @default(0)
  course    Course    @relation(fields: [course_id], references: [course_id])
  chapters  Chapter[]

  @@index([course_id])
}

model Chapter {
  chapter_id         String  @id @default(cuid())
  unit_id            String
  name               String
  youtubeVidLink     String
  readingMaterial    String? @db.VarChar(3000000)
  isCompleted        Boolean @default(false)
  unit               Unit    @relation(fields: [unit_id], references: [unit_id])

  @@index([unit_id])
}

model GenCourse {
  id          String   @id @default(cuid())
  user_id     String
  course_id   String   @unique
  title       String
  description String
  modules     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id])
}